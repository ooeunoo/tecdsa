// cmd/alice/main.go
package main

import (
	"log"
	"net"

	"tecdsa/cmd/alice/server"
	pb "tecdsa/pkg/api/grpc/dkg"

	"google.golang.org/grpc"
)

func main() {
	lis, err := net.Listen("tcp", ":50052")
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterDkgServiceServer(s, server.NewServer())
	log.Println("Alice server listening at :50052")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}


// cmd/alice/server/server.go
package server

import (
	"fmt"
	"io"
	"tecdsa/internal/dkls/dkg"
	pb "tecdsa/pkg/api/grpc/dkg"

	"github.com/coinbase/kryptology/pkg/core/curves"
	"github.com/coinbase/kryptology/pkg/ot/base/simplest"
	"github.com/coinbase/kryptology/pkg/zkp/schnorr"
)

type Server struct {
	pb.UnimplementedDkgServiceServer
	alice *dkg.Alice
}

func NewServer() *Server {
	curve := curves.K256()
	return &Server{
		alice: dkg.NewAlice(curve),
	}
}

func (s *Server) KeyGen(stream pb.DkgService_KeyGenServer) error {
	for {
		in, err := stream.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}

		switch msg := in.Msg.(type) {
		// Round 2
		case *pb.DkgMessage_Round1Response:
			fmt.Println("라운드2")

			round2Output, err := s.alice.Round2CommitToProof([32]byte(msg.Round1Response.Seed))
			if err != nil {
				return err
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round2Response{
					Round2Response: &pb.Round2Response{
						Seed:       round2Output.Seed[:],
						Commitment: round2Output.Commitment,
					},
				},
			}); err != nil {
				return err
			}
			// Round 4
		case *pb.DkgMessage_Round3Response:
			fmt.Println("라운드4")

			k256 := curves.K256()
			c, err := k256.Scalar.SetBytes(msg.Round3Response.C)
			if err != nil {
				return err
			}
			S, err := k256.Scalar.SetBytes(msg.Round3Response.S)
			if err != nil {
				return err
			}
			statement, err := k256.Point.FromAffineCompressed(msg.Round3Response.Statement)
			if err != nil {
				return err
			}
			schnorrProof := &schnorr.Proof{
				C:         c,
				S:         S,
				Statement: statement,
			}
			proof, err := s.alice.Round4VerifyAndReveal(schnorrProof)
			if err != nil {
				return err
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round4Response{
					Round4Response: &pb.Round4Response{
						C:         proof.C.Bytes(),
						S:         proof.S.Bytes(),
						Statement: proof.Statement.ToAffineCompressed(),
					},
				},
			}); err != nil {
				return err
			}
			// Round 6
		case *pb.DkgMessage_Round5Response:
			fmt.Println("라운드6")

			k256 := curves.K256()
			c, err := k256.Scalar.SetBytes(msg.Round5Response.C)
			if err != nil {
				return err
			}
			S, err := k256.Scalar.SetBytes(msg.Round5Response.S)
			if err != nil {
				return err
			}
			statement, err := k256.Point.FromAffineCompressed(msg.Round5Response.Statement)
			if err != nil {
				return err
			}
			schnorrProof := &schnorr.Proof{
				C:         c,
				S:         S,
				Statement: statement,
			}
			compressedReceiversMaskedChoice, err := s.alice.Round6DkgRound2Ot(schnorrProof)
			if err != nil {
				return err
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round6Response{
					Round6Response: &pb.Round6Response{
						ReceiversMaskedChoices: compressedReceiversMaskedChoice,
					},
				},
			}); err != nil {
				return err
			}

			// Round8
		case *pb.DkgMessage_Round7Response:
			fmt.Println("라운드8")

			challenges := make([]simplest.OtChallenge, len(msg.Round7Response.OtChallenges))
			for i, c := range msg.Round7Response.OtChallenges {
				copy(challenges[i][:], c)
			}
			challengeResponse, err := s.alice.Round8DkgRound4Ot(challenges)
			if err != nil {
				return err
			}
			challengeResponseBytes := make([][]byte, len(challengeResponse))
			for i, cr := range challengeResponse {
				challengeResponseBytes[i] = cr[:]
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round8Response{
					Round8Response: &pb.Round8Response{
						OtChallengeResponses: challengeResponseBytes,
					},
				},
			}); err != nil {
				return err
			}

			// Round10
		case *pb.DkgMessage_Round9Response:
			fmt.Println("라운드10")

			challengeOpenings := make([]simplest.ChallengeOpening, len(msg.Round9Response.ChallengeOpenings))
			for i, co := range msg.Round9Response.ChallengeOpenings {
				// co는 []byte 타입이므로, 이를 [2][32]byte 타입으로 변환
				if len(co) != 2*32 {
					return fmt.Errorf("invalid challenge opening length")
				}
				copy(challengeOpenings[i][0][:], co[:32])
				copy(challengeOpenings[i][1][:], co[32:])
			}
			err := s.alice.Round10DkgRound6Ot(challengeOpenings)
			if err != nil {
				return err
			}

			secretKeyShare := s.alice.Output().SecretKeyShare.Bytes()
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round10Response{
					Round10Response: &pb.Round10Response{
						Success:             true,
						AliceSecretKeyShare: secretKeyShare,
					},
				},
			}); err != nil {
				return err
			}
		}
	}
}


// cmd/bob/main.go
package main

import (
	"log"
	"net"

	"tecdsa/cmd/bob/server"
	pb "tecdsa/pkg/api/grpc/dkg"

	"google.golang.org/grpc"
)

func main() {
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterDkgServiceServer(s, server.NewServer())
	log.Println("Bob server listening at :50051")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}


// cmd/bob/server/server.go
package server

import (
	"fmt"
	"io"
	"log"
	"tecdsa/internal/dkls/dkg"
	pb "tecdsa/pkg/api/grpc/dkg"

	"github.com/coinbase/kryptology/pkg/core/curves"
	"github.com/coinbase/kryptology/pkg/ot/base/simplest"
	"github.com/coinbase/kryptology/pkg/zkp/schnorr"
	"github.com/ethereum/go-ethereum/crypto"
)

type Server struct {
	pb.UnimplementedDkgServiceServer
	bob *dkg.Bob
}

func NewServer() *Server {
	curve := curves.K256()
	return &Server{
		bob: dkg.NewBob(curve),
	}
}

func (s *Server) KeyGen(stream pb.DkgService_KeyGenServer) error {
	for {
		in, err := stream.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}

		switch msg := in.Msg.(type) {
		// Round1
		case *pb.DkgMessage_Round1Request:
			fmt.Println("라운드1")
			seed, err := s.bob.Round1GenerateRandomSeed()
			if err != nil {
				return err
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round1Response{
					Round1Response: &pb.Round1Response{Seed: seed[:]},
				},
			}); err != nil {
				return err
			}
		// Round3
		case *pb.DkgMessage_Round2Response:
			fmt.Println("라운드3")

			proof, err := s.bob.Round3SchnorrProve(&dkg.Round2Output{
				Seed:       [32]byte(msg.Round2Response.Seed),
				Commitment: msg.Round2Response.Commitment,
			})
			if err != nil {
				return err
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round3Response{
					Round3Response: &pb.Round3Response{
						C:         proof.C.Bytes(),
						S:         proof.S.Bytes(),
						Statement: proof.Statement.ToAffineCompressed(),
					},
				},
			}); err != nil {
				return err
			}
			// Round 5
		case *pb.DkgMessage_Round4Response:
			fmt.Println("라운드5")

			k256 := curves.K256()
			c, err := k256.Scalar.SetBytes(msg.Round4Response.C)
			if err != nil {
				return err
			}
			S, err := k256.Scalar.SetBytes(msg.Round4Response.S)
			if err != nil {
				return err
			}
			statement, err := k256.Point.FromAffineCompressed(msg.Round4Response.Statement)
			if err != nil {
				return err
			}

			schnorrProof := &schnorr.Proof{
				C:         c,
				S:         S,
				Statement: statement,
			}

			proof, err := s.bob.Round5DecommitmentAndStartOt(schnorrProof)
			if err != nil {
				return err
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round5Response{
					Round5Response: &pb.Round5Response{
						C:         proof.C.Bytes(),
						S:         proof.S.Bytes(),
						Statement: proof.Statement.ToAffineCompressed(),
					}},
			}); err != nil {
				return err
			}
			// Round 7

		case *pb.DkgMessage_Round6Response:
			fmt.Println("라운드7")

			compressedReceiversMaskedChoice := make([]simplest.ReceiversMaskedChoices, len(msg.Round6Response.ReceiversMaskedChoices))
			for i, choice := range msg.Round6Response.ReceiversMaskedChoices {
				compressedReceiversMaskedChoice[i] = choice
			}
			challenges, err := s.bob.Round7DkgRound3Ot(compressedReceiversMaskedChoice)
			if err != nil {
				return err
			}
			challengesBytes := make([][]byte, len(challenges))
			for i, challenge := range challenges {
				challengesBytes[i] = challenge[:]
			}
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round7Response{
					Round7Response: &pb.Round7Response{
						OtChallenges: challengesBytes,
					},
				},
			}); err != nil {
				return err
			}
			// Round 9
		case *pb.DkgMessage_Round8Response:
			fmt.Println("라운드9")

			challengeResponses := make([]simplest.OtChallengeResponse, len(msg.Round8Response.OtChallengeResponses))
			for i, response := range msg.Round8Response.OtChallengeResponses {
				copy(challengeResponses[i][:], response)
			}
			challengeOpenings, err := s.bob.Round9DkgRound5Ot(challengeResponses)
			if err != nil {
				log.Printf("Error in Round9DkgRound5Ot: %v", err)

				return err
			}

			// 변환 작업
			challengeOpeningsBytes := make([][]byte, len(challengeOpenings))
			for i, opening := range challengeOpenings {
				// opening은 [2][32]byte 타입이므로, 이를 []byte로 변환
				challengeOpeningsBytes[i] = make([]byte, 2*32)
				copy(challengeOpeningsBytes[i][0:32], opening[0][:])
				copy(challengeOpeningsBytes[i][32:], opening[1][:])
			}

			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_Round9Response{
					Round9Response: &pb.Round9Response{
						ChallengeOpenings: challengeOpeningsBytes,
					},
				},
			}); err != nil {
				return err
			}
		case *pb.DkgMessage_Round10Response:
			fmt.Println("라운드끝")

			aliceSecretKeyShare := msg.Round10Response.AliceSecretKeyShare
			curve := curves.K256()
			aliceSecretKey, err := curve.Scalar.SetBytes(aliceSecretKeyShare)
			if err != nil {
				return err
			}
			pkA := curve.ScalarBaseMult(aliceSecretKey)
			computedPublicKeyA := pkA.Mul(s.bob.Output().SecretKeyShare)
			publicKeyBytes := computedPublicKeyA.ToAffineUncompressed()
			publicKeyUnmarshal, err := crypto.UnmarshalPubkey(publicKeyBytes)
			if err != nil {
				log.Fatalf("Failed to unmarshal public key: %v", err)
			}
			address := crypto.PubkeyToAddress(*publicKeyUnmarshal)

			// DKG 완료
			if err := stream.Send(&pb.DkgMessage{
				Msg: &pb.DkgMessage_KeyGenResponse{
					KeyGenResponse: &pb.KeyGenResponse{
						Success: true,
						Address: address.Hex(),
					},
				},
			}); err != nil {
				return err
			}
		}
	}
}


// cmd/gateway/handlers/dkg.go
package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	pb "tecdsa/pkg/api/grpc/dkg"

	"google.golang.org/grpc"
)

func KeyGenHandler(w http.ResponseWriter, r *http.Request) {
	startTime := time.Now() // Start time measurement

	// Bob과 연결
	bobConn, err := grpc.Dial("bob:50051", grpc.WithInsecure())
	if err != nil {
		http.Error(w, "Failed to connect to Bob", http.StatusInternalServerError)
		return
	}
	defer bobConn.Close()
	bobClient := pb.NewDkgServiceClient(bobConn)

	// Alice와 연결
	aliceConn, err := grpc.Dial("alice:50052", grpc.WithInsecure())
	if err != nil {
		http.Error(w, "Failed to connect to Alice", http.StatusInternalServerError)
		return
	}
	defer aliceConn.Close()
	aliceClient := pb.NewDkgServiceClient(aliceConn)

	// Bob의 KeyGen 스트림 시작
	bobStream, err := bobClient.KeyGen(context.Background())
	if err != nil {
		http.Error(w, "Failed to create Bob stream", http.StatusInternalServerError)
		return
	}

	// Alice의 KeyGen 스트림 시작
	aliceStream, err := aliceClient.KeyGen(context.Background())
	if err != nil {
		http.Error(w, "Failed to create Alice stream", http.StatusInternalServerError)
		return
	}

	// DKG 프로토콜 시작
	if err := bobStream.Send(&pb.DkgMessage{Msg: &pb.DkgMessage_Round1Request{Round1Request: &pb.Round1Request{}}}); err != nil {
		http.Error(w, "Failed to send initial request to Bob", http.StatusInternalServerError)
		return
	}

	// Bob과 Alice 사이의 메시지 교환
	for {
		// Bob으로부터 응답 받기
		bobResp, err := bobStream.Recv()
		if err != nil {
			http.Error(w, "Failed to receive response from Bob", http.StatusInternalServerError)
			return
		}
		// DKG 프로토콜 완료 확인
		if keyGenResp, ok := bobResp.Msg.(*pb.DkgMessage_KeyGenResponse); ok {
			endTime := time.Now() // End time measurement
			duration := endTime.Sub(startTime)

			fmt.Println("생성된 주소:", keyGenResp.KeyGenResponse.Address)
			json.NewEncoder(w).Encode(map[string]interface{}{
				"success":  true,
				"address":  keyGenResp.KeyGenResponse.Address,
				"duration": duration.Seconds(),
			})
			return
		}

		// Bob의 응답을 Alice에게 전송
		if err := aliceStream.Send(bobResp); err != nil {
			http.Error(w, "Failed to send Bob's response to Alice", http.StatusInternalServerError)
			return
		}

		// Alice로부터 응답 받기
		aliceResp, err := aliceStream.Recv()
		if err != nil {
			http.Error(w, "Failed to receive response from Alice", http.StatusInternalServerError)
			return
		}

		// Alice의 응답을 Bob에게 전송
		if err := bobStream.Send(aliceResp); err != nil {
			http.Error(w, "Failed to send Alice's response to Bob", http.StatusInternalServerError)
			return
		}

	}
}


// cmd/gateway/main.go
package main

import (
	"log"
	"net/http"

	"tecdsa/cmd/gateway/server"
)

func main() {
	// db.Init()
	srv := server.NewServer()
	log.Fatal(http.ListenAndServe(":8080", srv))
}


// cmd/gateway/server/server.go
package server

import (
	"net/http"

	"tecdsa/cmd/gateway/handlers"
)

func NewServer() http.Handler {
	mux := http.NewServeMux()
	mux.HandleFunc("/key_gen", handlers.KeyGenHandler)
	return mux
}


// db/init.go
package db

import (
	"log"

	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

var DB *gorm.DB

func Init() {
	var err error
	dsn := "root:password@tcp(mysql:3306)/tecdsa?charset=utf8mb4&parseTime=True&loc=Local"
	DB, err = gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	// Migrate the schema
	DB.AutoMigrate(&RequestLog{})

	log.Println("Connected to database successfully")
}


// db/logger.go
package db

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"net/http"
)

type ResponseWriter struct {
	http.ResponseWriter
	body *bytes.Buffer
}

func (w ResponseWriter) Write(b []byte) (int, error) {
	w.body.Write(b)
	return w.ResponseWriter.Write(b)
}

func LogRequest(handler http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		params, _ := json.Marshal(r.URL.Query())
		body, _ := io.ReadAll(r.Body)
		r.Body = io.NopCloser(bytes.NewReader(body))
		headers, _ := json.Marshal(r.Header)

		responseBody := &bytes.Buffer{}
		responseWriter := &ResponseWriter{
			ResponseWriter: w,
			body:           responseBody,
		}

		handler.ServeHTTP(responseWriter, r)

		requestLog := RequestLog{
			Path:      r.URL.Path,
			Region:    r.Header.Get("X-Region"),
			Params:    string(params),
			Body:      string(body),
			Method:    r.Method,
			Headers:   string(headers),
			IPAddress: r.RemoteAddr,
			Response:  responseBody.String(), // 응답 결과 저장
		}

		result := DB.Create(&requestLog)
		if result.Error != nil {
			log.Printf("Failed to log request: %v", result.Error)
		}
	}
}


// db/model.go
package db

import (
	"gorm.io/gorm"
)

type RequestLog struct {
	gorm.Model
	Path      string
	Region    string
	Params    string `gorm:"type:text"`
	Body      string `gorm:"type:text"`
	Method    string
	Headers   string `gorm:"type:text"`
	IPAddress string
	Response  string `gorm:"type:text"` // 응답 결과를 저장할 필드 추가
}


// internal/codec/dkg/encoding.go
package encoidng

// import (
// 	"bytes"
// 	"encoding/gob"

// 	"github.com/pkg/errors"

// 	"github.com/coinbase/kryptology/pkg/core/curves"
// 	"github.com/coinbase/kryptology/pkg/ot/base/simplest"
// 	"github.com/coinbase/kryptology/pkg/tecdsa/dkls/v1/dkg"
// 	"github.com/coinbase/kryptology/pkg/zkp/schnorr"
// )

// const payloadKey = "direct"

// type DkgRoundMessage struct {
// 	Payloads map[string][]byte
// 	Metadata map[string]string
// }

// func newDkgRoundMessage(payload []byte, round string) *DkgRoundMessage {
// 	return &DkgRoundMessage{
// 		Payloads: map[string][]byte{payloadKey: payload},
// 		Metadata: map[string]string{"round": round},
// 	}
// }

// func registerTypes() {
// 	gob.Register(&curves.ScalarK256{})
// 	gob.Register(&curves.PointK256{})
// 	gob.Register(&curves.ScalarP256{})
// 	gob.Register(&curves.PointP256{})
// }

// func EncodeDkgRound1Output(commitment [32]byte, version uint) (*DkgRoundMessage, error) {
// 	registerTypes()
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(&commitment); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "1"), nil
// }

// func DecodeDkgRound2Input(m *DkgRoundMessage) ([32]byte, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := [32]byte{}
// 	if err := dec.Decode(&decoded); err != nil {
// 		return [32]byte{}, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound2Output(output *dkg.Round2Output) (*DkgRoundMessage, error) {
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(output); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "2"), nil
// }

// func DecodeDkgRound3Input(m *DkgRoundMessage) (*dkg.Round2Output, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := new(dkg.Round2Output)
// 	if err := dec.Decode(decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound3Output(proof *schnorr.Proof, version uint) (*DkgRoundMessage, error) {

// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(proof); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "3"), nil
// }

// func DecodeDkgRound4Input(m *DkgRoundMessage) (*schnorr.Proof, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := new(schnorr.Proof)
// 	if err := dec.Decode(decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound4Output(proof *schnorr.Proof) (*DkgRoundMessage, error) {

// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(proof); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "4"), nil
// }

// func DecodeDkgRound5Input(m *DkgRoundMessage) (*schnorr.Proof, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := new(schnorr.Proof)
// 	if err := dec.Decode(decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound5Output(proof *schnorr.Proof, version uint) (*DkgRoundMessage, error) {
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(proof); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "5"), nil
// }

// func DecodeDkgRound6Input(m *DkgRoundMessage) (*schnorr.Proof, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := new(schnorr.Proof)
// 	if err := dec.Decode(decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound6Output(choices []simplest.ReceiversMaskedChoices) (*DkgRoundMessage, error) {
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(choices); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "6"), nil
// }

// func DecodeDkgRound7Input(m *DkgRoundMessage) ([]simplest.ReceiversMaskedChoices, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := []simplest.ReceiversMaskedChoices{}
// 	if err := dec.Decode(&decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound7Output(challenge []simplest.OtChallenge, version uint) (*DkgRoundMessage, error) {
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(challenge); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "7"), nil
// }

// func DecodeDkgRound8Input(m *DkgRoundMessage) ([]simplest.OtChallenge, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := []simplest.OtChallenge{}
// 	if err := dec.Decode(&decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound8Output(responses []simplest.OtChallengeResponse) (*DkgRoundMessage, error) {
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(responses); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "8"), nil
// }

// func DecodeDkgRound9Input(m *DkgRoundMessage) ([]simplest.OtChallengeResponse, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := []simplest.OtChallengeResponse{}
// 	if err := dec.Decode(&decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// func EncodeDkgRound9Output(opening []simplest.ChallengeOpening) (*DkgRoundMessage, error) {
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(opening); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "9"), nil
// }

// func DecodeDkgRound10Input(m *DkgRoundMessage) ([]simplest.ChallengeOpening, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := []simplest.ChallengeOpening{}
// 	if err := dec.Decode(&decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// // EncodeAliceDkgOutput serializes Alice DKG
// func EncodeAliceDkgOutput(result *dkg.AliceOutput) (*DkgRoundMessage, error) {
// 	registerTypes()
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(result); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "alice-output"), nil
// }

// // DecodeAliceDkgResult deserializes Alice DKG output.
// func DecodeAliceDkgResult(m *DkgRoundMessage) (*dkg.AliceOutput, error) {
// 	registerTypes()
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := new(dkg.AliceOutput)
// 	if err := dec.Decode(&decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }

// // EncodeBobDkgOutput serializes Bob DKG output
// func EncodeBobDkgOutput(result *dkg.BobOutput) (*DkgRoundMessage, error) {
// 	registerTypes()
// 	buf := bytes.NewBuffer([]byte{})
// 	enc := gob.NewEncoder(buf)
// 	if err := enc.Encode(result); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return newDkgRoundMessage(buf.Bytes(), "bob-output"), nil
// }

// // DecodeBobDkgResult deserializes Bob DKG output.
// func DecodeBobDkgResult(m *DkgRoundMessage) (*dkg.BobOutput, error) {
// 	buf := bytes.NewBuffer(m.Payloads[payloadKey])
// 	dec := gob.NewDecoder(buf)
// 	decoded := new(dkg.BobOutput)
// 	if err := dec.Decode(&decoded); err != nil {
// 		return nil, errors.WithStack(err)
// 	}
// 	return decoded, nil
// }


// internal/codec/proto/codec.go
package codec

// import (
// 	"fmt"
// )

// const (
// 	DigestSize = 32
// )

// type Seed [DigestSize]byte
// type Commitment = []byte

// func MarshalProtoSeed(s Seed) ([]byte, error) {
// 	return s[:], nil
// }

// func UnmarshalProtoSeed(data []byte) (Seed, error) {
// 	if len(data) != DigestSize {
// 		return Seed{}, fmt.Errorf("invalid seed length")
// 	}
// 	var s Seed
// 	copy(s[:], data)
// 	return s, nil
// }

// func MarshalProtoCommitment(c Commitment) ([]byte, error) {
// 	return c, nil
// }

// func UnmarshalProtoCommitment(data []byte) (Commitment, error) {
// 	c := make(Commitment, len(data))
// 	copy(c, data)
// 	return c, nil
// }


// internal/dkls/dkg/dkg.go
package dkg

import (
	"crypto/rand"

	"github.com/coinbase/kryptology/pkg/core/curves"
	"github.com/coinbase/kryptology/pkg/ot/base/simplest"
	"github.com/coinbase/kryptology/pkg/ot/extension/kos"
	"github.com/coinbase/kryptology/pkg/zkp/schnorr"
	"github.com/gtank/merlin"
	"github.com/pkg/errors"
)

const (
	// keyCount is the number of encryption keys created. Since this is a 1-out-of-2 OT, the key count is set to 2.
	keyCount = 2

	// DigestSize is the length of hash. Similarly, when it comes to encrypting and decryption, it is the size of the
	// plaintext and ciphertext.
	DigestSize = 32
)

// AliceOutput is the result of running DKG for Alice. It contains both the public and secret values that are needed
// for signing.
type AliceOutput struct {
	// PublicKey is the joint public key of Alice and Bob.
	// This value is public.
	PublicKey curves.Point

	// SecretKeyShare is Alice's secret key for the joint public key.
	// This output must be kept secret. If it is lost, the users will lose access and cannot create signatures.
	SecretKeyShare curves.Scalar

	// SeedOtResult are the outputs that the receiver will obtain as a result of running the "random" OT protocol.
	// This output must be kept secret. Although, if it is lost the users can run another OT protocol and obtain
	// new values to replace it.
	SeedOtResult *simplest.ReceiverOutput
}

// BobOutput is the result of running DKG for Bob. It contains both the public and secret values that are needed
// for signing.
type BobOutput struct {
	// PublicKey is the joint public key of Alice and Bob.
	// This value is public.
	PublicKey curves.Point

	// SecretKeyShare is Bob's secret key for the joint public key.
	// This output must be kept secret. If it is lost, the users will lose access and cannot create signatures.
	SecretKeyShare curves.Scalar

	// SeedOtResult are the outputs that the sender will obtain as a result of running the "random" OT protocol.
	// This output must be kept secret. Although, if it is lost the users can run another OT protocol and obtain
	// new values to replace it.
	SeedOtResult *simplest.SenderOutput
}
type Alice struct {
	prover         *schnorr.Prover
	proof          *schnorr.Proof
	receiver       *simplest.Receiver
	secretKeyShare curves.Scalar
	publicKey      curves.Point
	curve          *curves.Curve // Add this line
	transcript     *merlin.Transcript
}

type Bob struct {
	prover          *schnorr.Prover
	sender          *simplest.Sender
	secretKeyShare  curves.Scalar
	publicKey       curves.Point
	aliceCommitment schnorr.Commitment
	aliceSalt       [simplest.DigestSize]byte
	curve           *curves.Curve
	transcript      *merlin.Transcript
}

type Round2Output struct {
	// Seed is the random value used to derive the joint unique session id.
	Seed [simplest.DigestSize]byte

	// Commitment is the commitment to the ZKP to Alice's secret key share.
	Commitment schnorr.Commitment
}

type Proof struct {
	C         curves.Scalar
	S         curves.Scalar
	Statement curves.Point
}

type (
	// OneTimePadDecryptionKey is the type of Rho^w, Rho^0, and RHo^1 in the paper.
	OneTimePadDecryptionKey = [DigestSize]byte

	// OneTimePadEncryptionKeys is the type of Rho^0, and RHo^1 in the paper.
	OneTimePadEncryptionKeys = [keyCount][DigestSize]byte

	// OtChallenge is the type of xi in the paper.
	OtChallenge = [DigestSize]byte

	// OtChallengeResponse is the type of Rho' in the paper.
	OtChallengeResponse = [DigestSize]byte

	// ChallengeOpening is the type of hashed Rho^0 and Rho^1
	ChallengeOpening = [keyCount][DigestSize]byte

	// ReceiversMaskedChoices corresponds to the "A" value in the paper in compressed format.
	ReceiversMaskedChoices = []byte
)

func NewAlice(curve *curves.Curve) *Alice {
	return &Alice{
		curve:      curve,
		transcript: merlin.NewTranscript("Coinbase_DKLs_DKG"),
	}
}

func NewBob(curve *curves.Curve) *Bob {
	return &Bob{
		curve:      curve,
		transcript: merlin.NewTranscript("Coinbase_DKLs_DKG"),
	}
}

func (bob *Bob) Round1GenerateRandomSeed() ([simplest.DigestSize]byte, error) {
	bobSeed := [simplest.DigestSize]byte{}
	if _, err := rand.Read(bobSeed[:]); err != nil {
		return [simplest.DigestSize]byte{}, errors.Wrap(err, "generating random bytes in bob DKG round 1 generate")
	}
	bob.transcript.AppendMessage([]byte("session_id_bob"), bobSeed[:])
	return bobSeed, nil
}

func (alice *Alice) Round2CommitToProof(bobSeed [simplest.DigestSize]byte) (*Round2Output, error) {
	aliceSeed := [simplest.DigestSize]byte{}
	if _, err := rand.Read(aliceSeed[:]); err != nil {
		return nil, errors.Wrap(err, "generating random bytes in alice DKG round 2 generate")
	}
	alice.transcript.AppendMessage([]byte("session_id_bob"), bobSeed[:])
	alice.transcript.AppendMessage([]byte("session_id_alice"), aliceSeed[:])

	uniqueSessionId := [simplest.DigestSize]byte{}
	copy(uniqueSessionId[:], alice.transcript.ExtractBytes([]byte("salt for simplest OT"), simplest.DigestSize))
	alice.receiver, _ = simplest.NewReceiver(alice.curve, kos.Kappa, uniqueSessionId)

	alice.secretKeyShare = alice.curve.Scalar.Random(rand.Reader)
	copy(uniqueSessionId[:], alice.transcript.ExtractBytes([]byte("salt for alice schnorr"), simplest.DigestSize))
	alice.prover = schnorr.NewProver(alice.curve, nil, uniqueSessionId[:])
	var commitment schnorr.Commitment
	alice.proof, commitment, _ = alice.prover.ProveCommit(alice.secretKeyShare)

	return &Round2Output{
		Commitment: commitment,
		Seed:       aliceSeed,
	}, nil
}

// Implement other rounds similarly

// Round3SchnorrProve receives Bob's Commitment and returns schnorr statment + proof.
// Steps 1 and 3 of protocol 2 on page 7.
func (bob *Bob) Round3SchnorrProve(round2Output *Round2Output) (*schnorr.Proof, error) {
	bob.transcript.AppendMessage([]byte("session_id_alice"), round2Output.Seed[:])

	bob.aliceCommitment = round2Output.Commitment // store it, so that we can check when alice decommits

	var err error
	uniqueSessionId := [simplest.DigestSize]byte{} // note: will use and re-use this below for sub-session IDs.
	copy(uniqueSessionId[:], bob.transcript.ExtractBytes([]byte("salt for simplest OT"), simplest.DigestSize))
	bob.sender, err = simplest.NewSender(bob.curve, kos.Kappa, uniqueSessionId)
	if err != nil {
		return nil, errors.Wrap(err, "bob constructing new OT sender in DKG round 2")
	}
	// extract alice's salt in the right order; we won't use this until she reveals her proof and we verify it below
	copy(bob.aliceSalt[:], bob.transcript.ExtractBytes([]byte("salt for alice schnorr"), simplest.DigestSize))
	bob.secretKeyShare = bob.curve.Scalar.Random(rand.Reader)
	copy(uniqueSessionId[:], bob.transcript.ExtractBytes([]byte("salt for bob schnorr"), simplest.DigestSize))
	bob.prover = schnorr.NewProver(bob.curve, nil, uniqueSessionId[:])
	proof, err := bob.prover.Prove(bob.secretKeyShare)
	if err != nil {
		return nil, errors.Wrap(err, "bob schnorr proving in DKG round 2")
	}
	return proof, err
}

// Round4VerifyAndReveal step 4 of protocol 2 on page 7.
func (alice *Alice) Round4VerifyAndReveal(proof *schnorr.Proof) (*schnorr.Proof, error) {
	var err error
	uniqueSessionId := [simplest.DigestSize]byte{}
	copy(uniqueSessionId[:], alice.transcript.ExtractBytes([]byte("salt for bob schnorr"), simplest.DigestSize))
	if err = schnorr.Verify(proof, alice.curve, nil, uniqueSessionId[:]); err != nil {
		return nil, errors.Wrap(err, "alice's verification of Bob's schnorr proof failed in DKG round 3")
	}
	alice.publicKey = proof.Statement.Mul(alice.secretKeyShare)
	return alice.proof, nil
}

// Round5DecommitmentAndStartOt step 5 of protocol 2 on page 7.
func (bob *Bob) Round5DecommitmentAndStartOt(proof *schnorr.Proof) (*schnorr.Proof, error) {
	var err error
	if err = schnorr.DecommitVerify(proof, bob.aliceCommitment, bob.curve, nil, bob.aliceSalt[:]); err != nil {
		return nil, errors.Wrap(err, "decommit + verify failed in bob's DKG round 4")
	}
	bob.publicKey = proof.Statement.Mul(bob.secretKeyShare)
	seedOTRound1Output, err := bob.sender.Round1ComputeAndZkpToPublicKey()
	if err != nil {
		return nil, errors.Wrap(err, "bob computing round 1 of seed  OT within DKG round 4")
	}
	return seedOTRound1Output, nil
}

// Round6DkgRound2Ot is a thin wrapper around the 2nd round of seed OT protocol.
func (alice *Alice) Round6DkgRound2Ot(proof *schnorr.Proof) ([]simplest.ReceiversMaskedChoices, error) {
	return alice.receiver.Round2VerifySchnorrAndPadTransfer(proof)
}

// Round7DkgRound3Ot is a thin wrapper around the 3rd round of seed OT protocol.
func (bob *Bob) Round7DkgRound3Ot(compressedReceiversMaskedChoice []simplest.ReceiversMaskedChoices) ([]simplest.OtChallenge, error) {
	return bob.sender.Round3PadTransfer(compressedReceiversMaskedChoice)
}

// Round8DkgRound4Ot is a thin wrapper around the 4th round of seed OT protocol.
func (alice *Alice) Round8DkgRound4Ot(challenge []simplest.OtChallenge) ([]simplest.OtChallengeResponse, error) {
	return alice.receiver.Round4RespondToChallenge(challenge)
}

// Round9DkgRound5Ot is a thin wrapper around the 5th round of seed OT protocol.
func (bob *Bob) Round9DkgRound5Ot(challengeResponses []simplest.OtChallengeResponse) ([]simplest.ChallengeOpening, error) {
	return bob.sender.Round5Verify(challengeResponses)
}

// Round10DkgRound6Ot is a thin wrapper around the 6th round of seed OT protocol.
func (alice *Alice) Round10DkgRound6Ot(challengeOpenings []simplest.ChallengeOpening) error {
	return alice.receiver.Round6Verify(challengeOpenings)
}

// Output returns the output of the DKG operation. Must be called after step 9. Calling it before that step
// has undefined behaviour.
func (alice *Alice) Output() *AliceOutput {
	return &AliceOutput{
		PublicKey:      alice.publicKey,
		SecretKeyShare: alice.secretKeyShare,
		SeedOtResult:   alice.receiver.Output,
	}
}

// Output returns the output of the DKG operation. Must be called after step 9. Calling it before that step
// has undefined behaviour.
func (bob *Bob) Output() *BobOutput {
	return &BobOutput{
		PublicKey:      bob.publicKey,
		SecretKeyShare: bob.secretKeyShare,
		SeedOtResult:   bob.sender.Output,
	}
}


// internal/dkls/network/eth.go
package eth

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"fmt"
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
)

// 로우 트랜잭션 생성
func GenerateTransaction(nonce uint64, to common.Address, amount *big.Int, gasLimit uint64, gasPrice *big.Int, data []byte) *types.Transaction {
	tx := types.NewTx(&types.LegacyTx{
		Nonce:    nonce,
		To:       &to,
		Value:    amount,
		Gas:      gasLimit,
		GasPrice: gasPrice,
		Data:     data,
	})
	return tx
}

// Private Key를 사용하여 트랜잭션 생성 및 서명 -> 서명 트랜잭션
func SignTransactionWithPrivateKey(client *ethclient.Client, privateKey *ecdsa.PrivateKey, toAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		return nil, fmt.Errorf("error casting public key to ECDSA")
	}

	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)

	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		return nil, fmt.Errorf("failed to get nonce: %v", err)
	}

	gasLimit := uint64(21000)
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		return nil, fmt.Errorf("failed to get gas price: %v", err)
	}
	gasPrice = new(big.Int).Mul(gasPrice, big.NewInt(15))
	gasPrice = new(big.Int).Div(gasPrice, big.NewInt(10))

	fmt.Println("fromAddress: ", fromAddress.Hex())
	fmt.Println("nonce: ", nonce)

	tx := GenerateTransaction(nonce, toAddress, amount, gasLimit, gasPrice, nil)

	chainID, err := client.NetworkID(context.Background())
	if err != nil {
		return nil, fmt.Errorf("failed to get chain ID: %v", err)
	}

	signedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)
	if err != nil {
		return nil, fmt.Errorf("failed to sign transaction: %v", err)
	}

	return signedTx, nil
}

// 서명 트랜잭션 브로드 케스트
func SendSignedTransaction(client *ethclient.Client, signedTx *types.Transaction, wait ...bool) error {
	// wait의 기본값을 false로 설정
	shouldWait := false
	if len(wait) > 0 {
		shouldWait = wait[0]
	}

	// 트랜잭션 전송
	err := client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		return fmt.Errorf("failed to send transaction: %v", err)
	}

	fmt.Printf("Transaction sent: %s\n", signedTx.Hash().Hex())

	// 트랜잭션 완료를 기다릴지 결정
	if shouldWait {
		receipt, err := waitForTransaction(client, signedTx.Hash())
		if err != nil {
			return fmt.Errorf("error waiting for transaction: %v", err)
		}
		fmt.Printf("Transaction confirmed in block %d\n", receipt.BlockNumber.Uint64())
	}

	return nil
}

// 트랜잭션 완료를 기다리는 헬퍼 함수
func waitForTransaction(client *ethclient.Client, txHash common.Hash) (*types.Receipt, error) {
	for {
		receipt, err := client.TransactionReceipt(context.Background(), txHash)
		if err != nil {
			if err == ethereum.NotFound {
				time.Sleep(time.Second) // 1초 대기 후 다시 시도
				continue
			}
			return nil, err
		}
		return receipt, nil
	}
}

// 트랜잭션 RLP 인코딩
func EncodeTransactionRLP(tx *types.Transaction) ([]byte, error) {
	var buf bytes.Buffer
	err := tx.EncodeRLP(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}


// main.go
package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	rootDir := "." // 현재 디렉토리를 루트로 설정
	outputFile := "one.txt"

	file, err := os.Create(outputFile)
	if err != nil {
		fmt.Printf("파일 생성 오류: %v\n", err)
		return
	}
	defer file.Close()

	err = filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && strings.HasSuffix(path, ".go") {
			relPath, _ := filepath.Rel(rootDir, path)
			content, err := ioutil.ReadFile(path)
			if err != nil {
				return err
			}

			_, err = fmt.Fprintf(file, "// %s\n%s\n\n", relPath, string(content))
			if err != nil {
				return err
			}
		}

		return nil
	})

	if err != nil {
		fmt.Printf("오류 발생: %v\n", err)
	} else {
		fmt.Printf("%s 파일이 생성되었습니다.\n", outputFile)
	}
}


// pkg/api/grpc/dkg/dkg.pb.go
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: pkg/api/grpc/dkg/dkg.proto

package dkg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DkgMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*DkgMessage_Round1Request
	//	*DkgMessage_Round1Response
	//	*DkgMessage_Round2Request
	//	*DkgMessage_Round2Response
	//	*DkgMessage_Round3Request
	//	*DkgMessage_Round3Response
	//	*DkgMessage_Round4Request
	//	*DkgMessage_Round4Response
	//	*DkgMessage_Round5Request
	//	*DkgMessage_Round5Response
	//	*DkgMessage_Round6Request
	//	*DkgMessage_Round6Response
	//	*DkgMessage_Round7Request
	//	*DkgMessage_Round7Response
	//	*DkgMessage_Round8Request
	//	*DkgMessage_Round8Response
	//	*DkgMessage_Round9Request
	//	*DkgMessage_Round9Response
	//	*DkgMessage_Round10Request
	//	*DkgMessage_Round10Response
	//	*DkgMessage_KeyGenResponse
	Msg isDkgMessage_Msg `protobuf_oneof:"msg"`
}

func (x *DkgMessage) Reset() {
	*x = DkgMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgMessage) ProtoMessage() {}

func (x *DkgMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgMessage.ProtoReflect.Descriptor instead.
func (*DkgMessage) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{0}
}

func (m *DkgMessage) GetMsg() isDkgMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *DkgMessage) GetRound1Request() *Round1Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round1Request); ok {
		return x.Round1Request
	}
	return nil
}

func (x *DkgMessage) GetRound1Response() *Round1Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round1Response); ok {
		return x.Round1Response
	}
	return nil
}

func (x *DkgMessage) GetRound2Request() *Round2Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round2Request); ok {
		return x.Round2Request
	}
	return nil
}

func (x *DkgMessage) GetRound2Response() *Round2Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round2Response); ok {
		return x.Round2Response
	}
	return nil
}

func (x *DkgMessage) GetRound3Request() *Round3Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round3Request); ok {
		return x.Round3Request
	}
	return nil
}

func (x *DkgMessage) GetRound3Response() *Round3Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round3Response); ok {
		return x.Round3Response
	}
	return nil
}

func (x *DkgMessage) GetRound4Request() *Round4Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round4Request); ok {
		return x.Round4Request
	}
	return nil
}

func (x *DkgMessage) GetRound4Response() *Round4Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round4Response); ok {
		return x.Round4Response
	}
	return nil
}

func (x *DkgMessage) GetRound5Request() *Round5Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round5Request); ok {
		return x.Round5Request
	}
	return nil
}

func (x *DkgMessage) GetRound5Response() *Round5Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round5Response); ok {
		return x.Round5Response
	}
	return nil
}

func (x *DkgMessage) GetRound6Request() *Round6Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round6Request); ok {
		return x.Round6Request
	}
	return nil
}

func (x *DkgMessage) GetRound6Response() *Round6Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round6Response); ok {
		return x.Round6Response
	}
	return nil
}

func (x *DkgMessage) GetRound7Request() *Round7Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round7Request); ok {
		return x.Round7Request
	}
	return nil
}

func (x *DkgMessage) GetRound7Response() *Round7Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round7Response); ok {
		return x.Round7Response
	}
	return nil
}

func (x *DkgMessage) GetRound8Request() *Round8Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round8Request); ok {
		return x.Round8Request
	}
	return nil
}

func (x *DkgMessage) GetRound8Response() *Round8Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round8Response); ok {
		return x.Round8Response
	}
	return nil
}

func (x *DkgMessage) GetRound9Request() *Round9Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round9Request); ok {
		return x.Round9Request
	}
	return nil
}

func (x *DkgMessage) GetRound9Response() *Round9Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round9Response); ok {
		return x.Round9Response
	}
	return nil
}

func (x *DkgMessage) GetRound10Request() *Round10Request {
	if x, ok := x.GetMsg().(*DkgMessage_Round10Request); ok {
		return x.Round10Request
	}
	return nil
}

func (x *DkgMessage) GetRound10Response() *Round10Response {
	if x, ok := x.GetMsg().(*DkgMessage_Round10Response); ok {
		return x.Round10Response
	}
	return nil
}

func (x *DkgMessage) GetKeyGenResponse() *KeyGenResponse {
	if x, ok := x.GetMsg().(*DkgMessage_KeyGenResponse); ok {
		return x.KeyGenResponse
	}
	return nil
}

type isDkgMessage_Msg interface {
	isDkgMessage_Msg()
}

type DkgMessage_Round1Request struct {
	Round1Request *Round1Request `protobuf:"bytes,1,opt,name=round1Request,proto3,oneof"`
}

type DkgMessage_Round1Response struct {
	Round1Response *Round1Response `protobuf:"bytes,2,opt,name=round1Response,proto3,oneof"`
}

type DkgMessage_Round2Request struct {
	Round2Request *Round2Request `protobuf:"bytes,3,opt,name=round2Request,proto3,oneof"`
}

type DkgMessage_Round2Response struct {
	Round2Response *Round2Response `protobuf:"bytes,4,opt,name=round2Response,proto3,oneof"`
}

type DkgMessage_Round3Request struct {
	Round3Request *Round3Request `protobuf:"bytes,5,opt,name=round3Request,proto3,oneof"`
}

type DkgMessage_Round3Response struct {
	Round3Response *Round3Response `protobuf:"bytes,6,opt,name=round3Response,proto3,oneof"`
}

type DkgMessage_Round4Request struct {
	Round4Request *Round4Request `protobuf:"bytes,7,opt,name=round4Request,proto3,oneof"`
}

type DkgMessage_Round4Response struct {
	Round4Response *Round4Response `protobuf:"bytes,8,opt,name=round4Response,proto3,oneof"`
}

type DkgMessage_Round5Request struct {
	Round5Request *Round5Request `protobuf:"bytes,9,opt,name=round5Request,proto3,oneof"`
}

type DkgMessage_Round5Response struct {
	Round5Response *Round5Response `protobuf:"bytes,10,opt,name=round5Response,proto3,oneof"`
}

type DkgMessage_Round6Request struct {
	Round6Request *Round6Request `protobuf:"bytes,11,opt,name=round6Request,proto3,oneof"`
}

type DkgMessage_Round6Response struct {
	Round6Response *Round6Response `protobuf:"bytes,12,opt,name=round6Response,proto3,oneof"`
}

type DkgMessage_Round7Request struct {
	Round7Request *Round7Request `protobuf:"bytes,13,opt,name=round7Request,proto3,oneof"`
}

type DkgMessage_Round7Response struct {
	Round7Response *Round7Response `protobuf:"bytes,14,opt,name=round7Response,proto3,oneof"`
}

type DkgMessage_Round8Request struct {
	Round8Request *Round8Request `protobuf:"bytes,15,opt,name=round8Request,proto3,oneof"`
}

type DkgMessage_Round8Response struct {
	Round8Response *Round8Response `protobuf:"bytes,16,opt,name=round8Response,proto3,oneof"`
}

type DkgMessage_Round9Request struct {
	Round9Request *Round9Request `protobuf:"bytes,17,opt,name=round9Request,proto3,oneof"`
}

type DkgMessage_Round9Response struct {
	Round9Response *Round9Response `protobuf:"bytes,18,opt,name=round9Response,proto3,oneof"`
}

type DkgMessage_Round10Request struct {
	Round10Request *Round10Request `protobuf:"bytes,19,opt,name=round10Request,proto3,oneof"`
}

type DkgMessage_Round10Response struct {
	Round10Response *Round10Response `protobuf:"bytes,20,opt,name=round10Response,proto3,oneof"`
}

type DkgMessage_KeyGenResponse struct {
	KeyGenResponse *KeyGenResponse `protobuf:"bytes,21,opt,name=keyGenResponse,proto3,oneof"`
}

func (*DkgMessage_Round1Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round1Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round2Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round2Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round3Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round3Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round4Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round4Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round5Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round5Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round6Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round6Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round7Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round7Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round8Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round8Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round9Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round9Response) isDkgMessage_Msg() {}

func (*DkgMessage_Round10Request) isDkgMessage_Msg() {}

func (*DkgMessage_Round10Response) isDkgMessage_Msg() {}

func (*DkgMessage_KeyGenResponse) isDkgMessage_Msg() {}

type Round1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Round1Request) Reset() {
	*x = Round1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1Request) ProtoMessage() {}

func (x *Round1Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1Request.ProtoReflect.Descriptor instead.
func (*Round1Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{1}
}

type Round1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed []byte `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *Round1Response) Reset() {
	*x = Round1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1Response) ProtoMessage() {}

func (x *Round1Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1Response.ProtoReflect.Descriptor instead.
func (*Round1Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{2}
}

func (x *Round1Response) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

type Round2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed []byte `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *Round2Request) Reset() {
	*x = Round2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round2Request) ProtoMessage() {}

func (x *Round2Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round2Request.ProtoReflect.Descriptor instead.
func (*Round2Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{3}
}

func (x *Round2Request) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

type Round2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed       []byte `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
	Commitment []byte `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *Round2Response) Reset() {
	*x = Round2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round2Response) ProtoMessage() {}

func (x *Round2Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round2Response.ProtoReflect.Descriptor instead.
func (*Round2Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{4}
}

func (x *Round2Response) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *Round2Response) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type Round3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed       []byte `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
	Commitment []byte `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *Round3Request) Reset() {
	*x = Round3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round3Request) ProtoMessage() {}

func (x *Round3Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round3Request.ProtoReflect.Descriptor instead.
func (*Round3Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{5}
}

func (x *Round3Request) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *Round3Request) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type Round3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C         []byte `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	S         []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Statement []byte `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *Round3Response) Reset() {
	*x = Round3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round3Response) ProtoMessage() {}

func (x *Round3Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round3Response.ProtoReflect.Descriptor instead.
func (*Round3Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{6}
}

func (x *Round3Response) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *Round3Response) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Round3Response) GetStatement() []byte {
	if x != nil {
		return x.Statement
	}
	return nil
}

type Round4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C         []byte `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	S         []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Statement []byte `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *Round4Request) Reset() {
	*x = Round4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round4Request) ProtoMessage() {}

func (x *Round4Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round4Request.ProtoReflect.Descriptor instead.
func (*Round4Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{7}
}

func (x *Round4Request) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *Round4Request) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Round4Request) GetStatement() []byte {
	if x != nil {
		return x.Statement
	}
	return nil
}

type Round4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C         []byte `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	S         []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Statement []byte `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *Round4Response) Reset() {
	*x = Round4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round4Response) ProtoMessage() {}

func (x *Round4Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round4Response.ProtoReflect.Descriptor instead.
func (*Round4Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{8}
}

func (x *Round4Response) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *Round4Response) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Round4Response) GetStatement() []byte {
	if x != nil {
		return x.Statement
	}
	return nil
}

type Round5Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C         []byte `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	S         []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Statement []byte `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *Round5Request) Reset() {
	*x = Round5Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round5Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round5Request) ProtoMessage() {}

func (x *Round5Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round5Request.ProtoReflect.Descriptor instead.
func (*Round5Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{9}
}

func (x *Round5Request) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *Round5Request) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Round5Request) GetStatement() []byte {
	if x != nil {
		return x.Statement
	}
	return nil
}

type Round5Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C         []byte `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	S         []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Statement []byte `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *Round5Response) Reset() {
	*x = Round5Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round5Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round5Response) ProtoMessage() {}

func (x *Round5Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round5Response.ProtoReflect.Descriptor instead.
func (*Round5Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{10}
}

func (x *Round5Response) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *Round5Response) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Round5Response) GetStatement() []byte {
	if x != nil {
		return x.Statement
	}
	return nil
}

type Round6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C         []byte `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	S         []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Statement []byte `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *Round6Request) Reset() {
	*x = Round6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round6Request) ProtoMessage() {}

func (x *Round6Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round6Request.ProtoReflect.Descriptor instead.
func (*Round6Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{11}
}

func (x *Round6Request) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *Round6Request) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Round6Request) GetStatement() []byte {
	if x != nil {
		return x.Statement
	}
	return nil
}

type Round6Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiversMaskedChoices [][]byte `protobuf:"bytes,1,rep,name=receivers_masked_choices,json=receiversMaskedChoices,proto3" json:"receivers_masked_choices,omitempty"`
}

func (x *Round6Response) Reset() {
	*x = Round6Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round6Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round6Response) ProtoMessage() {}

func (x *Round6Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round6Response.ProtoReflect.Descriptor instead.
func (*Round6Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{12}
}

func (x *Round6Response) GetReceiversMaskedChoices() [][]byte {
	if x != nil {
		return x.ReceiversMaskedChoices
	}
	return nil
}

type Round7Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiversMaskedChoices [][]byte `protobuf:"bytes,1,rep,name=receivers_masked_choices,json=receiversMaskedChoices,proto3" json:"receivers_masked_choices,omitempty"`
}

func (x *Round7Request) Reset() {
	*x = Round7Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round7Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round7Request) ProtoMessage() {}

func (x *Round7Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round7Request.ProtoReflect.Descriptor instead.
func (*Round7Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{13}
}

func (x *Round7Request) GetReceiversMaskedChoices() [][]byte {
	if x != nil {
		return x.ReceiversMaskedChoices
	}
	return nil
}

type Round7Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtChallenges [][]byte `protobuf:"bytes,1,rep,name=ot_challenges,json=otChallenges,proto3" json:"ot_challenges,omitempty"`
}

func (x *Round7Response) Reset() {
	*x = Round7Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round7Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round7Response) ProtoMessage() {}

func (x *Round7Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round7Response.ProtoReflect.Descriptor instead.
func (*Round7Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{14}
}

func (x *Round7Response) GetOtChallenges() [][]byte {
	if x != nil {
		return x.OtChallenges
	}
	return nil
}

type Round8Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtChallenges [][]byte `protobuf:"bytes,1,rep,name=ot_challenges,json=otChallenges,proto3" json:"ot_challenges,omitempty"`
}

func (x *Round8Request) Reset() {
	*x = Round8Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round8Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round8Request) ProtoMessage() {}

func (x *Round8Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round8Request.ProtoReflect.Descriptor instead.
func (*Round8Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{15}
}

func (x *Round8Request) GetOtChallenges() [][]byte {
	if x != nil {
		return x.OtChallenges
	}
	return nil
}

type Round8Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtChallengeResponses [][]byte `protobuf:"bytes,1,rep,name=ot_challenge_responses,json=otChallengeResponses,proto3" json:"ot_challenge_responses,omitempty"`
}

func (x *Round8Response) Reset() {
	*x = Round8Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round8Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round8Response) ProtoMessage() {}

func (x *Round8Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round8Response.ProtoReflect.Descriptor instead.
func (*Round8Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{16}
}

func (x *Round8Response) GetOtChallengeResponses() [][]byte {
	if x != nil {
		return x.OtChallengeResponses
	}
	return nil
}

type Round9Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtChallengeResponses [][]byte `protobuf:"bytes,1,rep,name=ot_challenge_responses,json=otChallengeResponses,proto3" json:"ot_challenge_responses,omitempty"`
}

func (x *Round9Request) Reset() {
	*x = Round9Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round9Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round9Request) ProtoMessage() {}

func (x *Round9Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round9Request.ProtoReflect.Descriptor instead.
func (*Round9Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{17}
}

func (x *Round9Request) GetOtChallengeResponses() [][]byte {
	if x != nil {
		return x.OtChallengeResponses
	}
	return nil
}

type Round9Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeOpenings [][]byte `protobuf:"bytes,1,rep,name=challenge_openings,json=challengeOpenings,proto3" json:"challenge_openings,omitempty"`
}

func (x *Round9Response) Reset() {
	*x = Round9Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round9Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round9Response) ProtoMessage() {}

func (x *Round9Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round9Response.ProtoReflect.Descriptor instead.
func (*Round9Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{18}
}

func (x *Round9Response) GetChallengeOpenings() [][]byte {
	if x != nil {
		return x.ChallengeOpenings
	}
	return nil
}

type Round10Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeOpenings [][]byte `protobuf:"bytes,1,rep,name=challenge_openings,json=challengeOpenings,proto3" json:"challenge_openings,omitempty"`
}

func (x *Round10Request) Reset() {
	*x = Round10Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round10Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round10Request) ProtoMessage() {}

func (x *Round10Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round10Request.ProtoReflect.Descriptor instead.
func (*Round10Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{19}
}

func (x *Round10Request) GetChallengeOpenings() [][]byte {
	if x != nil {
		return x.ChallengeOpenings
	}
	return nil
}

type Round10Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success             bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	AliceSecretKeyShare []byte `protobuf:"bytes,2,opt,name=alice_secret_key_share,json=aliceSecretKeyShare,proto3" json:"alice_secret_key_share,omitempty"`
}

func (x *Round10Response) Reset() {
	*x = Round10Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round10Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round10Response) ProtoMessage() {}

func (x *Round10Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round10Response.ProtoReflect.Descriptor instead.
func (*Round10Response) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{20}
}

func (x *Round10Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Round10Response) GetAliceSecretKeyShare() []byte {
	if x != nil {
		return x.AliceSecretKeyShare
	}
	return nil
}

type KeyGenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Duration int32  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *KeyGenResponse) Reset() {
	*x = KeyGenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyGenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyGenResponse) ProtoMessage() {}

func (x *KeyGenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_grpc_dkg_dkg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyGenResponse.ProtoReflect.Descriptor instead.
func (*KeyGenResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP(), []int{21}
}

func (x *KeyGenResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KeyGenResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KeyGenResponse) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

var File_pkg_api_grpc_dkg_dkg_proto protoreflect.FileDescriptor

var file_pkg_api_grpc_dkg_dkg_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64,
	0x6b, 0x67, 0x2f, 0x64, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x64, 0x6b,
	0x67, 0x22, 0xa6, 0x0a, 0x0a, 0x0a, 0x44, 0x6b, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6b, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x35, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6b,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6b, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x37, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x37, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x38, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x38, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x38,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x39, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6b,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6b,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x6b, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x0e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x22, 0x23, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x0d,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x63, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a,
	0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c,
	0x0a, 0x01, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x4a, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x63, 0x12,
	0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0d, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x36,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x49, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x35, 0x0a,
	0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x38, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x74,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x38, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x6f, 0x74,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x45, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x14, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x0e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3f, 0x0a, 0x0e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x60, 0x0a, 0x0f, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x31, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x60, 0x0a,
	0x0e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x3c, 0x0a, 0x0a, 0x44, 0x6b, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x0f, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x44, 0x6b,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x44,
	0x6b, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x12, 0x5a,
	0x10, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x6b,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_grpc_dkg_dkg_proto_rawDescOnce sync.Once
	file_pkg_api_grpc_dkg_dkg_proto_rawDescData = file_pkg_api_grpc_dkg_dkg_proto_rawDesc
)

func file_pkg_api_grpc_dkg_dkg_proto_rawDescGZIP() []byte {
	file_pkg_api_grpc_dkg_dkg_proto_rawDescOnce.Do(func() {
		file_pkg_api_grpc_dkg_dkg_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_grpc_dkg_dkg_proto_rawDescData)
	})
	return file_pkg_api_grpc_dkg_dkg_proto_rawDescData
}

var file_pkg_api_grpc_dkg_dkg_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_pkg_api_grpc_dkg_dkg_proto_goTypes = []any{
	(*DkgMessage)(nil),      // 0: dkg.DkgMessage
	(*Round1Request)(nil),   // 1: dkg.Round1Request
	(*Round1Response)(nil),  // 2: dkg.Round1Response
	(*Round2Request)(nil),   // 3: dkg.Round2Request
	(*Round2Response)(nil),  // 4: dkg.Round2Response
	(*Round3Request)(nil),   // 5: dkg.Round3Request
	(*Round3Response)(nil),  // 6: dkg.Round3Response
	(*Round4Request)(nil),   // 7: dkg.Round4Request
	(*Round4Response)(nil),  // 8: dkg.Round4Response
	(*Round5Request)(nil),   // 9: dkg.Round5Request
	(*Round5Response)(nil),  // 10: dkg.Round5Response
	(*Round6Request)(nil),   // 11: dkg.Round6Request
	(*Round6Response)(nil),  // 12: dkg.Round6Response
	(*Round7Request)(nil),   // 13: dkg.Round7Request
	(*Round7Response)(nil),  // 14: dkg.Round7Response
	(*Round8Request)(nil),   // 15: dkg.Round8Request
	(*Round8Response)(nil),  // 16: dkg.Round8Response
	(*Round9Request)(nil),   // 17: dkg.Round9Request
	(*Round9Response)(nil),  // 18: dkg.Round9Response
	(*Round10Request)(nil),  // 19: dkg.Round10Request
	(*Round10Response)(nil), // 20: dkg.Round10Response
	(*KeyGenResponse)(nil),  // 21: dkg.KeyGenResponse
}
var file_pkg_api_grpc_dkg_dkg_proto_depIdxs = []int32{
	1,  // 0: dkg.DkgMessage.round1Request:type_name -> dkg.Round1Request
	2,  // 1: dkg.DkgMessage.round1Response:type_name -> dkg.Round1Response
	3,  // 2: dkg.DkgMessage.round2Request:type_name -> dkg.Round2Request
	4,  // 3: dkg.DkgMessage.round2Response:type_name -> dkg.Round2Response
	5,  // 4: dkg.DkgMessage.round3Request:type_name -> dkg.Round3Request
	6,  // 5: dkg.DkgMessage.round3Response:type_name -> dkg.Round3Response
	7,  // 6: dkg.DkgMessage.round4Request:type_name -> dkg.Round4Request
	8,  // 7: dkg.DkgMessage.round4Response:type_name -> dkg.Round4Response
	9,  // 8: dkg.DkgMessage.round5Request:type_name -> dkg.Round5Request
	10, // 9: dkg.DkgMessage.round5Response:type_name -> dkg.Round5Response
	11, // 10: dkg.DkgMessage.round6Request:type_name -> dkg.Round6Request
	12, // 11: dkg.DkgMessage.round6Response:type_name -> dkg.Round6Response
	13, // 12: dkg.DkgMessage.round7Request:type_name -> dkg.Round7Request
	14, // 13: dkg.DkgMessage.round7Response:type_name -> dkg.Round7Response
	15, // 14: dkg.DkgMessage.round8Request:type_name -> dkg.Round8Request
	16, // 15: dkg.DkgMessage.round8Response:type_name -> dkg.Round8Response
	17, // 16: dkg.DkgMessage.round9Request:type_name -> dkg.Round9Request
	18, // 17: dkg.DkgMessage.round9Response:type_name -> dkg.Round9Response
	19, // 18: dkg.DkgMessage.round10Request:type_name -> dkg.Round10Request
	20, // 19: dkg.DkgMessage.round10Response:type_name -> dkg.Round10Response
	21, // 20: dkg.DkgMessage.keyGenResponse:type_name -> dkg.KeyGenResponse
	0,  // 21: dkg.DkgService.KeyGen:input_type -> dkg.DkgMessage
	0,  // 22: dkg.DkgService.KeyGen:output_type -> dkg.DkgMessage
	22, // [22:23] is the sub-list for method output_type
	21, // [21:22] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_pkg_api_grpc_dkg_dkg_proto_init() }
func file_pkg_api_grpc_dkg_dkg_proto_init() {
	if File_pkg_api_grpc_dkg_dkg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DkgMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Round1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Round1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Round2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Round2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Round3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Round3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Round4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Round4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Round5Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Round5Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Round6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Round6Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Round7Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Round7Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Round8Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Round8Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Round9Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Round9Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Round10Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Round10Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_grpc_dkg_dkg_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*KeyGenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_api_grpc_dkg_dkg_proto_msgTypes[0].OneofWrappers = []any{
		(*DkgMessage_Round1Request)(nil),
		(*DkgMessage_Round1Response)(nil),
		(*DkgMessage_Round2Request)(nil),
		(*DkgMessage_Round2Response)(nil),
		(*DkgMessage_Round3Request)(nil),
		(*DkgMessage_Round3Response)(nil),
		(*DkgMessage_Round4Request)(nil),
		(*DkgMessage_Round4Response)(nil),
		(*DkgMessage_Round5Request)(nil),
		(*DkgMessage_Round5Response)(nil),
		(*DkgMessage_Round6Request)(nil),
		(*DkgMessage_Round6Response)(nil),
		(*DkgMessage_Round7Request)(nil),
		(*DkgMessage_Round7Response)(nil),
		(*DkgMessage_Round8Request)(nil),
		(*DkgMessage_Round8Response)(nil),
		(*DkgMessage_Round9Request)(nil),
		(*DkgMessage_Round9Response)(nil),
		(*DkgMessage_Round10Request)(nil),
		(*DkgMessage_Round10Response)(nil),
		(*DkgMessage_KeyGenResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_grpc_dkg_dkg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_grpc_dkg_dkg_proto_goTypes,
		DependencyIndexes: file_pkg_api_grpc_dkg_dkg_proto_depIdxs,
		MessageInfos:      file_pkg_api_grpc_dkg_dkg_proto_msgTypes,
	}.Build()
	File_pkg_api_grpc_dkg_dkg_proto = out.File
	file_pkg_api_grpc_dkg_dkg_proto_rawDesc = nil
	file_pkg_api_grpc_dkg_dkg_proto_goTypes = nil
	file_pkg_api_grpc_dkg_dkg_proto_depIdxs = nil
}


// pkg/api/grpc/dkg/dkg_grpc.pb.go
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: pkg/api/grpc/dkg/dkg.proto

package dkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DkgService_KeyGen_FullMethodName = "/dkg.DkgService/KeyGen"
)

// DkgServiceClient is the client API for DkgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DkgServiceClient interface {
	KeyGen(ctx context.Context, opts ...grpc.CallOption) (DkgService_KeyGenClient, error)
}

type dkgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDkgServiceClient(cc grpc.ClientConnInterface) DkgServiceClient {
	return &dkgServiceClient{cc}
}

func (c *dkgServiceClient) KeyGen(ctx context.Context, opts ...grpc.CallOption) (DkgService_KeyGenClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DkgService_ServiceDesc.Streams[0], DkgService_KeyGen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dkgServiceKeyGenClient{ClientStream: stream}
	return x, nil
}

type DkgService_KeyGenClient interface {
	Send(*DkgMessage) error
	Recv() (*DkgMessage, error)
	grpc.ClientStream
}

type dkgServiceKeyGenClient struct {
	grpc.ClientStream
}

func (x *dkgServiceKeyGenClient) Send(m *DkgMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dkgServiceKeyGenClient) Recv() (*DkgMessage, error) {
	m := new(DkgMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DkgServiceServer is the server API for DkgService service.
// All implementations must embed UnimplementedDkgServiceServer
// for forward compatibility
type DkgServiceServer interface {
	KeyGen(DkgService_KeyGenServer) error
	mustEmbedUnimplementedDkgServiceServer()
}

// UnimplementedDkgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDkgServiceServer struct {
}

func (UnimplementedDkgServiceServer) KeyGen(DkgService_KeyGenServer) error {
	return status.Errorf(codes.Unimplemented, "method KeyGen not implemented")
}
func (UnimplementedDkgServiceServer) mustEmbedUnimplementedDkgServiceServer() {}

// UnsafeDkgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DkgServiceServer will
// result in compilation errors.
type UnsafeDkgServiceServer interface {
	mustEmbedUnimplementedDkgServiceServer()
}

func RegisterDkgServiceServer(s grpc.ServiceRegistrar, srv DkgServiceServer) {
	s.RegisterService(&DkgService_ServiceDesc, srv)
}

func _DkgService_KeyGen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DkgServiceServer).KeyGen(&dkgServiceKeyGenServer{ServerStream: stream})
}

type DkgService_KeyGenServer interface {
	Send(*DkgMessage) error
	Recv() (*DkgMessage, error)
	grpc.ServerStream
}

type dkgServiceKeyGenServer struct {
	grpc.ServerStream
}

func (x *dkgServiceKeyGenServer) Send(m *DkgMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dkgServiceKeyGenServer) Recv() (*DkgMessage, error) {
	m := new(DkgMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DkgService_ServiceDesc is the grpc.ServiceDesc for DkgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DkgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dkg.DkgService",
	HandlerType: (*DkgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeyGen",
			Handler:       _DkgService_KeyGen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/grpc/dkg/dkg.proto",
}


