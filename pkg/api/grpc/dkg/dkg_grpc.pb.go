// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: pkg/api/grpc/dkg/dkg.proto

package dkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DKGService_ProcessDKG_FullMethodName = "/dkg.DKGService/ProcessDKG"
)

// DKGServiceClient is the client API for DKGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DKGServiceClient interface {
	ProcessDKG(ctx context.Context, in *DKGRequest, opts ...grpc.CallOption) (*DKGResponse, error)
}

type dKGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDKGServiceClient(cc grpc.ClientConnInterface) DKGServiceClient {
	return &dKGServiceClient{cc}
}

func (c *dKGServiceClient) ProcessDKG(ctx context.Context, in *DKGRequest, opts ...grpc.CallOption) (*DKGResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DKGResponse)
	err := c.cc.Invoke(ctx, DKGService_ProcessDKG_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKGServiceServer is the server API for DKGService service.
// All implementations must embed UnimplementedDKGServiceServer
// for forward compatibility
type DKGServiceServer interface {
	ProcessDKG(context.Context, *DKGRequest) (*DKGResponse, error)
	mustEmbedUnimplementedDKGServiceServer()
}

// UnimplementedDKGServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDKGServiceServer struct {
}

func (UnimplementedDKGServiceServer) ProcessDKG(context.Context, *DKGRequest) (*DKGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDKG not implemented")
}
func (UnimplementedDKGServiceServer) mustEmbedUnimplementedDKGServiceServer() {}

// UnsafeDKGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DKGServiceServer will
// result in compilation errors.
type UnsafeDKGServiceServer interface {
	mustEmbedUnimplementedDKGServiceServer()
}

func RegisterDKGServiceServer(s grpc.ServiceRegistrar, srv DKGServiceServer) {
	s.RegisterService(&DKGService_ServiceDesc, srv)
}

func _DKGService_ProcessDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServiceServer).ProcessDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DKGService_ProcessDKG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServiceServer).ProcessDKG(ctx, req.(*DKGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DKGService_ServiceDesc is the grpc.ServiceDesc for DKGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DKGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dkg.DKGService",
	HandlerType: (*DKGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessDKG",
			Handler:    _DKGService_ProcessDKG_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/grpc/dkg/dkg.proto",
}
