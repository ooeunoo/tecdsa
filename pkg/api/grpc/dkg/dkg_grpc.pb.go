// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: pkg/api/grpc/dkg/dkg.proto

package dkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DkgService_KeyGen_FullMethodName = "/dkg.DkgService/KeyGen"
)

// DkgServiceClient is the client API for DkgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DkgServiceClient interface {
	KeyGen(ctx context.Context, opts ...grpc.CallOption) (DkgService_KeyGenClient, error)
}

type dkgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDkgServiceClient(cc grpc.ClientConnInterface) DkgServiceClient {
	return &dkgServiceClient{cc}
}

func (c *dkgServiceClient) KeyGen(ctx context.Context, opts ...grpc.CallOption) (DkgService_KeyGenClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DkgService_ServiceDesc.Streams[0], DkgService_KeyGen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dkgServiceKeyGenClient{ClientStream: stream}
	return x, nil
}

type DkgService_KeyGenClient interface {
	Send(*DkgMessage) error
	Recv() (*DkgMessage, error)
	grpc.ClientStream
}

type dkgServiceKeyGenClient struct {
	grpc.ClientStream
}

func (x *dkgServiceKeyGenClient) Send(m *DkgMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dkgServiceKeyGenClient) Recv() (*DkgMessage, error) {
	m := new(DkgMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DkgServiceServer is the server API for DkgService service.
// All implementations must embed UnimplementedDkgServiceServer
// for forward compatibility
type DkgServiceServer interface {
	KeyGen(DkgService_KeyGenServer) error
	mustEmbedUnimplementedDkgServiceServer()
}

// UnimplementedDkgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDkgServiceServer struct {
}

func (UnimplementedDkgServiceServer) KeyGen(DkgService_KeyGenServer) error {
	return status.Errorf(codes.Unimplemented, "method KeyGen not implemented")
}
func (UnimplementedDkgServiceServer) mustEmbedUnimplementedDkgServiceServer() {}

// UnsafeDkgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DkgServiceServer will
// result in compilation errors.
type UnsafeDkgServiceServer interface {
	mustEmbedUnimplementedDkgServiceServer()
}

func RegisterDkgServiceServer(s grpc.ServiceRegistrar, srv DkgServiceServer) {
	s.RegisterService(&DkgService_ServiceDesc, srv)
}

func _DkgService_KeyGen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DkgServiceServer).KeyGen(&dkgServiceKeyGenServer{ServerStream: stream})
}

type DkgService_KeyGenServer interface {
	Send(*DkgMessage) error
	Recv() (*DkgMessage, error)
	grpc.ServerStream
}

type dkgServiceKeyGenServer struct {
	grpc.ServerStream
}

func (x *dkgServiceKeyGenServer) Send(m *DkgMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dkgServiceKeyGenServer) Recv() (*DkgMessage, error) {
	m := new(DkgMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DkgService_ServiceDesc is the grpc.ServiceDesc for DkgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DkgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dkg.DkgService",
	HandlerType: (*DkgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeyGen",
			Handler:       _DkgService_KeyGen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/grpc/dkg/dkg.proto",
}
