// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: sign/sign.proto

package sign

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SignService_Sign_FullMethodName = "/sign.SignService/Sign"
)

// SignServiceClient is the client API for SignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignServiceClient interface {
	Sign(ctx context.Context, opts ...grpc.CallOption) (SignService_SignClient, error)
}

type signServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignServiceClient(cc grpc.ClientConnInterface) SignServiceClient {
	return &signServiceClient{cc}
}

func (c *signServiceClient) Sign(ctx context.Context, opts ...grpc.CallOption) (SignService_SignClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SignService_ServiceDesc.Streams[0], SignService_Sign_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &signServiceSignClient{ClientStream: stream}
	return x, nil
}

type SignService_SignClient interface {
	Send(*SignMessage) error
	Recv() (*SignMessage, error)
	grpc.ClientStream
}

type signServiceSignClient struct {
	grpc.ClientStream
}

func (x *signServiceSignClient) Send(m *SignMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signServiceSignClient) Recv() (*SignMessage, error) {
	m := new(SignMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignServiceServer is the server API for SignService service.
// All implementations must embed UnimplementedSignServiceServer
// for forward compatibility
type SignServiceServer interface {
	Sign(SignService_SignServer) error
	mustEmbedUnimplementedSignServiceServer()
}

// UnimplementedSignServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignServiceServer struct {
}

func (UnimplementedSignServiceServer) Sign(SignService_SignServer) error {
	return status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedSignServiceServer) mustEmbedUnimplementedSignServiceServer() {}

// UnsafeSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignServiceServer will
// result in compilation errors.
type UnsafeSignServiceServer interface {
	mustEmbedUnimplementedSignServiceServer()
}

func RegisterSignServiceServer(s grpc.ServiceRegistrar, srv SignServiceServer) {
	s.RegisterService(&SignService_ServiceDesc, srv)
}

func _SignService_Sign_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignServiceServer).Sign(&signServiceSignServer{ServerStream: stream})
}

type SignService_SignServer interface {
	Send(*SignMessage) error
	Recv() (*SignMessage, error)
	grpc.ServerStream
}

type signServiceSignServer struct {
	grpc.ServerStream
}

func (x *signServiceSignServer) Send(m *SignMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signServiceSignServer) Recv() (*SignMessage, error) {
	m := new(SignMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignService_ServiceDesc is the grpc.ServiceDesc for SignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sign.SignService",
	HandlerType: (*SignServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sign",
			Handler:       _SignService_Sign_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sign/sign.proto",
}
