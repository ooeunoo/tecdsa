syntax = "proto3";

package keygen;

option go_package = "tecdsa/proto/keygen";

service KeygenService {
  rpc KeyGen(stream KeygenMessage) returns (stream KeygenMessage);
}

message KeygenMessage {
  oneof msg {
    KeyGenRequestTo1Output keyGenRequestTo1Output = 1;
    KeyGenRound1To2Output  keyGenRound1To2Output = 2;
    KeyGenRound2To3Output  keyGenRound2To3Output = 3;
    KeyGenRound3To4Output  keyGenRound3To4Output = 4;
    KeyGenRound4To5Output  keyGenRound4To5Output = 5;
    KeyGenRound5To6Output  keyGenRound5To6Output = 6;
    KeyGenRound6To7Output  keyGenRound6To7Output = 7;
    KeyGenRound7To8Output  keyGenRound7To8Output = 8;
    KeyGenRound8To9Output  keyGenRound8To9Output = 9;
    KeyGenRound9To10Output keyGenRound9To10Output = 10;
    KeyGenRound10To11Output keyGenRound10To11Output = 11;
    KeyGenRound11ToResponseOutput keyGenRound11ToResponseOutput = 12;
  }
}
// 요청 메시지 DTO
message KeyGenRequestMessage{}

// 요청 -> 라운드 1 
message KeyGenRequestTo1Output {}

// 라운드 1 -> 라운드 2
message KeyGenRound1To2Output {
  bytes payload = 1;
}

// 라운드 2 -> 라운드 3
message KeyGenRound2To3Output {
  bytes payload = 1;
}

// 라운드 3 -> 라운드 4
message KeyGenRound3To4Output {
  bytes payload = 1;
}

// 라운드 4 -> 라운드 5
message KeyGenRound4To5Output {
  bytes payload = 1;
}

// 라운드 5 -> 라운드 6
message KeyGenRound5To6Output {
  bytes payload = 1;
}

// 라운드 6 -> 라운드 7
message KeyGenRound6To7Output {
  bytes payload = 1;
}

// 라운드 7 -> 라운드 8
message KeyGenRound7To8Output {
  bytes payload = 1;
}

// 라운드 8 -> 라운드 9
message KeyGenRound8To9Output {
  bytes payload = 1;
}

// 라운드 9 -> 라운드 10
message KeyGenRound9To10Output {
  bytes payload = 1;
}

// 라운드 10 -> 라운드 11(시크릿키 공유를 위함)
message KeyGenRound10To11Output {
  bytes secret_key =3;
}

// 라운드 11 -> 게이트 웨이
message KeyGenRound11ToResponseOutput {
  string address = 2;
  bytes secret_key =3;
}

// 게이트 웨이 -> 응답
message KeyGenResponse { 
  bool success = 1; 
  string address=2;  
  bytes secret_key = 3; 
  int32 duration=4; 
}




